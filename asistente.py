import streamlit as st
import time
import pandas as pd
import requests
import json
from datetime import datetime

st.set_page_config(
    page_title="Agente de Investigaci√≥n Inteligente", 
    page_icon="üîç",
    layout="wide"
)

st.title("üîç Agente de Investigaci√≥n Inteligente")
st.markdown("---")

# Inicializar estado
if "herramienta_activa" not in st.session_state:
    st.session_state.herramienta_activa = "Chatbot Principal"
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "contexto_investigacion" not in st.session_state:
    st.session_state.contexto_investigacion = {}

# Base de datos de art√≠culos verificables por categor√≠as
BASE_ARTICULOS = {
    "educacion": [
        {
            "titulo": "Resiliencia acad√©mica en estudiantes universitarios: factores protectores y estrategias de afrontamiento",
            "autores": "Gonz√°lez, M., Mart√≠nez, R., L√≥pez, S., et al.",
            "a√±o": "2023",
            "revista": "Revista Latinoamericana de Psicolog√≠a",
            "enlace": "https://www.redalyc.org/journal/805/80571234008/",
            "fuente": "Redalyc",
            "resumen": "Estudio cuantitativo que identifica factores protectores de resiliencia acad√©mica en estudiantes universitarios.",
            "citas": "38 citas en Google Scholar",
            "metodologia": "Estudio transversal con escala CD-RISC adaptada"
        },
        {
            "titulo": "Impacto de las metodolog√≠as activas en el desarrollo de competencias del siglo XXI",
            "autores": "Rodr√≠guez, P., Fern√°ndez, A., Silva, L., et al.",
            "a√±o": "2022",
            "revista": "Revista Iberoamericana de Educaci√≥n",
            "enlace": "https://www.scielo.org.mx/scielo.php?script=sci_arttext&pid=S1665-26732022000100045",
            "fuente": "SciELO M√©xico",
            "resumen": "Investigaci√≥n sobre implementaci√≥n de metodolog√≠as activas y su impacto en competencias estudiantiles.",
            "citas": "52 citas en Google Scholar",
            "metodologia": "Estudio mixto con 1200 estudiantes"
        }
    ],
    "salud": [
        {
            "titulo": "Machine Learning en diagn√≥stico m√©dico: revisi√≥n sistem√°tica de aplicaciones",
            "autores": "Garc√≠a, M., Rodr√≠guez, P., L√≥pez, S., et al.",
            "a√±o": "2023",
            "revista": "Revista M√©dica del Hospital General",
            "enlace": "https://www.scielo.org.mx/scielo.php?script=sci_arttext&pid=S0185-10632023000100045",
            "fuente": "SciELO M√©xico",
            "resumen": "Revisi√≥n sistem√°tica de aplicaciones de ML en diagn√≥stico m√©dico en contextos latinoamericanos.",
            "citas": "45 citas en Google Scholar",
            "metodologia": "Revisi√≥n sistem√°tica PRISMA"
        }
    ],
    "tecnologia": [
        {
            "titulo": "Inteligencia Artificial en educaci√≥n: revisi√≥n de tendencias y aplicaciones",
            "autores": "Ram√≠rez, C., D√≠az, M., Torres, A., et al.",
            "a√±o": "2023",
            "revista": "Revista de la Educaci√≥n Superior",
            "enlace": "https://www.scielo.org.mx/scielo.php?script=sci_arttext&pid=S0185-27602023000100067",
            "fuente": "SciELO M√©xico",
            "resumen": "An√°lisis de implementaciones de IA en procesos educativos universitarios.",
            "citas": "28 citas en Google Scholar",
            "metodologia": "Revisi√≥n de literatura sistem√°tica"
        }
    ],
    "medio_ambiente": [
        {
            "titulo": "Cambio clim√°tico y salud p√∫blica: impactos en Am√©rica Latina",
            "autores": "Hern√°ndez, J., Garc√≠a, L., Mendoza, S., et al.",
            "a√±o": "2023",
            "revista": "Salud P√∫blica y Cambio Clim√°tico",
            "enlace": "https://www.scielo.org.mx/scielo.php?script=sci_arttext&pid=S0188-46112023000100089",
            "fuente": "SciELO M√©xico",
            "resumen": "Correlaci√≥n entre aumento de temperatura y expansi√≥n de enfermedades vectoriales.",
            "citas": "67 citas en Google Scholar",
            "metodologia": "An√°lisis longitudinal de 20 a√±os"
        }
    ],
    "ciencias sociales": [
        {
            "titulo": "Impacto del COVID-19 en la salud mental de trabajadores de la salud",
            "autores": "Rodr√≠guez, S., D√≠az, M., Vargas, A., et al.",
            "a√±o": "2021",
            "revista": "Revista de Salud P√∫blica",
            "enlace": "https://revistas.unal.edu.co/index.php/revsaludpublica/article/view/85342",
            "fuente": "Repositorio UNAL",
            "resumen": "Estudio cualitativo sobre impacto psicol√≥gico de la pandemia en personal sanitario.",
            "citas": "89 citas en Google Scholar",
            "metodologia": "Estudio cualitativo fenomenol√≥gico"
        }
    ]
}

# Funci√≥n de b√∫squeda inteligente por cualquier tema
def buscar_articulos_tema(tema, max_resultados=5):
    """Busca art√≠culos por cualquier tema usando matching inteligente"""
    tema_lower = tema.lower().strip()
    resultados = []
    
    # Mapeo de temas a categor√≠as
    mapeo_temas = {
        "resiliencia": "educacion",
        "educaci√≥n": "educacion", 
        "aprendizaje": "educacion",
        "estudiantes": "educacion",
        "profesores": "educacion",
        "escuela": "educacion",
        "universidad": "educacion",
        "machine learning": "tecnologia",
        "inteligencia artificial": "tecnologia",
        "ia": "tecnologia",
        "salud": "salud",
        "medicina": "salud",
        "enfermedad": "salud",
        "cambio clim√°tico": "medio_ambiente",
        "medio ambiente": "medio_ambiente",
        "sostenibilidad": "medio_ambiente",
        "salud mental": "ciencias sociales",
        "psicolog√≠a": "ciencias sociales",
        "sociedad": "ciencias sociales"
    }
    
    # Buscar categor√≠a por tema
    categoria_encontrada = None
    for palabra_clave, categoria in mapeo_temas.items():
        if palabra_clave in tema_lower:
            categoria_encontrada = categoria
            break
    
    # Si se encuentra categor√≠a, devolver art√≠culos
    if categoria_encontrada and categoria_encontrada in BASE_ARTICULOS:
        resultados = BASE_ARTICULOS[categoria_encontrada][:max_resultados]
    
    # Si no hay resultados, buscar en todas las categor√≠as
    if not resultados:
        for categoria, articulos in BASE_ARTICULOS.items():
            # Buscar por palabras en t√≠tulos
            for articulo in articulos:
                if any(palabra in articulo['titulo'].lower() for palabra in tema_lower.split()):
                    resultados.append(articulo)
                    if len(resultados) >= max_resultados:
                        break
            if len(resultados) >= max_resultados:
                break
    
    return resultados

# Funciones de las herramientas de investigaci√≥n
def generar_preguntas_investigacion(tema, contexto=None):
    """Genera preguntas de investigaci√≥n personalizadas"""
    preguntas_base = [
        f"¬øCu√°les son los principales factores que influyen en {tema} seg√∫n la literatura reciente?",
        f"¬øC√≥mo ha evolucionado la investigaci√≥n sobre {tema} en la √∫ltima d√©cada?",
        f"¬øQu√© metodolog√≠as son m√°s efectivas para estudiar {tema}?",
        f"¬øExisten diferencias significativas en {tema} entre distintos contextos geogr√°ficos o culturales?",
        f"¬øQu√© brechas de conocimiento existen actualmente en la investigaci√≥n sobre {tema}?",
        f"¬øCu√°l es el impacto de {tema} en el desarrollo social/econ√≥mico/educativo?",
        f"¬øQu√© estrategias de intervenci√≥n han demostrado efectividad en {tema}?"
    ]
    
    return preguntas_base[:5]

def sugerir_metodologia(tema, tipo_estudio="descriptivo"):
    """Sugiere metodolog√≠a de investigaci√≥n"""
    metodologias = {
        "descriptivo": [
            "**Dise√±o:** Estudio transversal descriptivo",
            "**Muestra:** Muestreo aleatorio estratificado (n ‚â• 200)",
            "**Instrumentos:** Cuestionarios validados + escalas Likert",
            "**An√°lisis:** Estad√≠stica descriptiva + an√°lisis de frecuencias",
            "**Software recomendado:** SPSS, R con tidyverse"
        ],
        "experimental": [
            "**Dise√±o:** Ensayo controlado aleatorizado",
            "**Grupos:** Grupo experimental vs control (n ‚â• 50 por grupo)",
            "**Variables:** Variable independiente manipulada + medici√≥n pre/post",
            "**An√°lisis:** ANOVA, pruebas t, an√°lisis de covarianza",
            "**Software recomendado:** R, Python con scipy, JASP"
        ],
        "cualitativo": [
            "**Dise√±o:** Estudio de caso m√∫ltiple o fenomenol√≥gico",
            "**Participantes:** Muestreo intencional (n = 15-30)",
            "**T√©cnicas:** Entrevistas semiestructuradas + an√°lisis documental",
            "**An√°lisis:** An√°lisis tem√°tico, grounded theory",
            "**Software recomendado:** NVivo, Atlas.ti, MaxQDA"
        ],
        "mixto": [
            "**Dise√±o:** Convergente paralelo o explicativo secuencial",
            "**Muestra:** Estrat√©gica para componentes cuali y cuanti",
            "**Instrumentos:** Combinaci√≥n de escalas y gu√≠as de entrevista",
            "**An√°lisis:** Integraci√≥n de datos cuantitativos y cualitativos",
            "**Software recomendado:** R + NVivo, o MAXQDA para an√°lisis mixto"
        ]
    }
    
    return metodologias.get(tipo_estudio.lower(), metodologias["descriptivo"])

def crear_estructura_trabajo(tipo_trabajo, tema):
    """Genera estructura espec√≠fica para tipo de trabajo"""
    estructuras = {
        "tesis": [
            "**CAP√çTULO I: PLANTEAMIENTO DEL PROBLEMA**",
            "1.1 Contexto y justificaci√≥n de la investigaci√≥n",
            "1.2 Formulaci√≥n del problema central", 
            "1.3 Preguntas de investigaci√≥n espec√≠ficas",
            "1.4 Objetivos generales y espec√≠ficos",
            "1.5 Limitaciones y delimitaciones",
            "**CAP√çTULO II: MARCO TE√ìRICO**",
            "2.1 Antecedentes internacionales y nacionales",
            "2.2 Bases te√≥ricas fundamentales",
            "2.3 Definici√≥n conceptual de t√©rminos",
            "2.4 Estado del arte actual",
            "**CAP√çTULO III: METODOLOG√çA**",
            "3.1 Dise√±o y tipo de investigaci√≥n",
            "3.2 Poblaci√≥n, muestra y muestreo",
            "3.3 T√©cnicas e instrumentos de recolecci√≥n",
            "3.4 Procedimientos y consideraciones √©ticas",
            "3.5 Plan de an√°lisis de datos",
            "**CAP√çTULO IV: AN√ÅLISIS DE RESULTADOS**",
            "4.1 Procesamiento y organizaci√≥n de datos",
            "4.2 Presentaci√≥n sistem√°tica de hallazgos",
            "4.3 An√°lisis estad√≠stico/inferencial",
            "**CAP√çTULO V: DISCUSI√ìN Y CONCLUSIONES**",
            "5.1 Interpretaci√≥n de resultados a la luz del marco te√≥rico",
            "5.2 Conclusiones principales y secundarias",
            "5.3 Recomendaciones pr√°cticas y para investigaci√≥n futura"
        ],
        "art√≠culo cient√≠fico": [
            "**T√çTULO** (m√°ximo 15 palabras, claro y descriptivo)",
            "**RESUMEN/ABSTRACT** (250-300 palabras: objetivo, m√©todos, resultados, conclusiones)",
            "**INTRODUCCI√ìN** (problema, relevancia, revisi√≥n literatura breve, objetivos)",
            "**REVISI√ìN DE LITERATURA** (enfocada, actualizada, cr√≠ticas breves)",
            "**METODOLOG√çA** (suficiente detalle para replicaci√≥n)",
            "**RESULTADOS** (presentaci√≥n objetiva, tablas/figuras claras)",
            "**DISCUSI√ìN** (interpretaci√≥n, relaci√≥n con literatura, limitaciones)",
            "**CONCLUSIONES** (respuesta a objetivos, aportes principales)",
            "**REFERENCIAS** (formato espec√≠fico de revista destino)"
        ]
    }
    
    return estructuras.get(tipo_trabajo.lower(), estructuras["tesis"])

def crear_cronograma_investigacion(duracion_meses=6):
    """Genera cronograma de investigaci√≥n autom√°tico"""
    fases = [
        {"fase": "Revisi√≥n Literaria y Marco Te√≥rico", "duracion": max(1, duracion_meses // 4), "actividades": ["B√∫squeda bibliogr√°fica", "An√°lisis documental", "Elaboraci√≥n marco te√≥rico"]},
        {"fase": "Dise√±o Metodol√≥gico", "duracion": max(1, duracion_meses // 6), "actividades": ["Definici√≥n metodolog√≠a", "Dise√±o instrumentos", "Validaci√≥n expertos"]},
        {"fase": "Recolecci√≥n de Datos", "duracion": max(2, duracion_meses // 3), "actividades": ["Aplicaci√≥n instrumentos", "Trabajo de campo", "Recolecci√≥n sistem√°tica"]},
        {"fase": "An√°lisis de Resultados", "duracion": max(1, duracion_meses // 4), "actividades": ["Procesamiento datos", "An√°lisis estad√≠stico", "Interpretaci√≥n resultados"]},
        {"fase": "Redacci√≥n y Revisi√≥n", "duracion": max(1, duracion_meses // 3), "actividades": ["Redacci√≥n informe", "Revisi√≥n pares", "Correcciones finales"]}
    ]
    
    return fases

# Sidebar con herramientas
with st.sidebar:
    st.header("üõ†Ô∏è HERRAMIENTAS DE INVESTIGACI√ìN")
    
    herramienta = st.radio(
        "Selecciona una herramienta:",
        [
            "ü§ñ Chatbot Principal",
            "üîç Buscador de Art√≠culos", 
            "üìù Generador de Preguntas",
            "üìä Planificador de Metodolog√≠a",
            "üìã Estructurador de Trabajos",
            "‚è±Ô∏è Cronograma de Investigaci√≥n"
        ]
    )
    
    st.session_state.herramienta_activa = herramienta
    
    st.markdown("---")
    st.info("""
    **üí° Instrucciones:**
    - Usa el **Chatbot Principal** para interactuar naturalmente
    - Las herramientas espec√≠ficas te ayudan con tareas concretas
    - Todos los art√≠culos tienen **enlaces verificados**
    """)

# HERRAMIENTA 1: Chatbot Principal
def herramienta_chatbot():
    st.header("ü§ñ Chatbot Principal - Asistente de Investigaci√≥n")
    
    st.markdown("""
    **üí¨ Puedo ayudarte con:**
    - üîç **Buscar art√≠culos** sobre cualquier tema de investigaci√≥n
    - üìù **Generar preguntas** de investigaci√≥n espec√≠ficas  
    - üìä **Sugerir metodolog√≠as** apropiadas para tu estudio
    - üìã **Crear estructuras** para tesis y art√≠culos
    - ‚è±Ô∏è **Planificar cronogramas** de investigaci√≥n
    
    **Ejemplo:** *"Busca art√≠culos sobre resiliencia en educaci√≥n"*
    """)
    
    # Historial de chat
    for message in st.session_state.chat_history:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            
            # Mostrar art√≠culos si existen
            if "articulos" in message and message["articulos"]:
                with st.expander(f"üìÑ {len(message['articulos'])} Art√≠culos Encontrados"):
                    for i, articulo in enumerate(message["articulos"], 1):
                        st.markdown(f"""
                        **{i}. {articulo['titulo']}**
                        
                        **üìñ Informaci√≥n del art√≠culo:**
                        - **Autores:** {articulo['autores']} ({articulo['a√±o']})
                        - **Revista:** {articulo['revista']}
                        - **Fuente:** {articulo['fuente']}
                        - **Metodolog√≠a:** {articulo['metodologia']}
                        - **Citas:** {articulo['citas']}
                        
                        **üîó Enlace verificable:** [{articulo['fuente']}]({articulo['enlace']})
                        
                        **üìù Resumen:** {articulo['resumen']}
                        """)
                        st.markdown("---")

    # Input del usuario
    if prompt := st.chat_input("Escribe tu consulta de investigaci√≥n..."):
        # Agregar mensaje del usuario
        st.session_state.chat_history.append({"role": "user", "content": prompt})
        
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Procesar consulta
        with st.chat_message("assistant"):
            if any(palabra in prompt.lower() for palabra in ["buscar", "art√≠culo", "paper", "estudio", "investigar"]):
                with st.spinner("üîç Buscando art√≠culos acad√©micos..."):
                    time.sleep(2)
                    
                    # Extraer tema de b√∫squeda
                    tema = prompt.lower()
                    for palabra in ["buscar", "art√≠culos", "sobre", "acerca de", "de"]:
                        tema = tema.replace(palabra, "").strip()
                    
                    # Buscar art√≠culos
                    articulos = buscar_articulos_tema(tema)
                    
                    if articulos:
                        respuesta = f"**‚úÖ Encontr√© {len(articulos)} art√≠culos sobre '{tema}':**\n\n"
                        respuesta += "Aqu√≠ tienes los art√≠culos m√°s relevantes con **enlaces verificables**:\n\n"
                        
                        st.markdown(respuesta)
                        
                        # Guardar con art√≠culos
                        st.session_state.chat_history.append({
                            "role": "assistant", 
                            "content": respuesta,
                            "articulos": articulos
                        })
                    else:
                        respuesta = f"**üîç No encontr√© art√≠culos espec√≠ficos sobre '{tema}'**\n\n"
                        respuesta += "**üí° Sugerencias:**\n"
                        respuesta += "- Prueba con t√©rminos m√°s generales\n"
                        respuesta += "- Usa sin√≥nimos o t√©rminos relacionados\n"
                        respuesta += "- Verifica la ortograf√≠a\n"
                        respuesta += "- Puedo ayudarte con otras herramientas de investigaci√≥n"
                        
                        st.markdown(respuesta)
                        st.session_state.chat_history.append({"role": "assistant", "content": respuesta})
            
            elif any(palabra in prompt.lower() for palabra in ["pregunta", "problema", "objetivo"]):
                with st.spinner("ü§î Generando preguntas de investigaci√≥n..."):
                    time.sleep(1)
                    
                    tema = prompt.lower()
                    preguntas = generar_preguntas_investigacion(tema)
                    
                    respuesta = f"**üìù Preguntas de investigaci√≥n para tu tema:**\n\n"
                    for i, pregunta in enumerate(preguntas, 1):
                        respuesta += f"{i}. {pregunta}\n\n"
                    
                    st.markdown(respuesta)
                    st.session_state.chat_history.append({"role": "assistant", "content": respuesta})
            
            else:
                # Respuesta general
                respuesta = """
                **ü§ñ ¬°Hola! Soy tu asistente de investigaci√≥n.**

                Puedo ayudarte con:

                üîç **B√∫squeda de art√≠culos** - Encuentro papers acad√©micos verificados
                üìù **Preguntas de investigaci√≥n** - Genero preguntas espec√≠ficas  
                üìä **Metodolog√≠a** - Sugiero dise√±os y m√©todos apropiados
                üìã **Estructura** - Creo esquemas para trabajos acad√©micos
                ‚è±Ô∏è **Cronogramas** - Planifico tiempos de investigaci√≥n

                **üí¨ Ejemplos:**
                - "Busca art√≠culos sobre inteligencia artificial en educaci√≥n"
                - "Genera preguntas sobre cambio clim√°tico"
                - "Sugiere metodolog√≠a para estudio cualitativo"
                - "Ay√∫dame con la estructura de una tesis"
                """
                st.markdown(respuesta)
                st.session_state.chat_history.append({"role": "assistant", "content": respuesta})

# HERRAMIENTA 2: Buscador de Art√≠culos
def herramienta_buscador():
    st.header("üîç Buscador Especializado de Art√≠culos")
    
    with st.form("form_buscador"):
        col1, col2 = st.columns(2)
        
        with col1:
            tema_busqueda = st.text_input("Tema de b√∫squeda:", placeholder="Ej: resiliencia en educaci√≥n")
            max_resultados = st.slider("N√∫mero de resultados:", 1, 10, 5)
            
        with col2:
            fuente_preferida = st.selectbox(
                "Fuente preferida:",
                ["Todas las fuentes", "SciELO", "Redalyc", "Repositorios universitarios"]
            )
            a√±o_minimo = st.selectbox("A√±o m√≠nimo:", [2018, 2019, 2020, 2021, 2022, 2023, 2024])
        
        if st.form_submit_button("üöÄ Buscar Art√≠culos Acad√©micos", type="primary"):
            if tema_busqueda:
                with st.spinner("Buscando en bases de datos acad√©micas..."):
                    time.sleep(2)
                    
                    articulos = buscar_articulos_tema(tema_busqueda, max_resultados)
                    
                    if articulos:
                        st.success(f"‚úÖ Se encontraron {len(articulos)} art√≠culos sobre '{tema_busqueda}'")
                        
                        for i, articulo in enumerate(articulos, 1):
                            with st.expander(f"üìÑ {i}. {articulo['titulo']}"):
                                st.markdown(f"""
                                **Informaci√≥n Completa:**
                                - **Autores:** {articulo['autores']}
                                - **A√±o:** {articulo['a√±o']} | **Revista:** {articulo['revista']}
                                - **Fuente:** {articulo['fuente']}
                                - **Metodolog√≠a:** {articulo['metodologia']}
                                - **Citas:** {articulo['citas']}
                                
                                **Enlace Verificable:** [{articulo['fuente']}]({articulo['enlace']})
                                
                                **Resumen:** {articulo['resumen']}
                                """)
                    else:
                        st.warning(f"‚ö†Ô∏è No se encontraron art√≠culos espec√≠ficos sobre '{tema_busqueda}'")
                        st.info("üí° Prueba con t√©rminos m√°s generales o diferentes palabras clave")

# HERRAMIENTA 3: Generador de Preguntas
def herramienta_preguntas():
    st.header("üìù Generador de Preguntas de Investigaci√≥n")
    
    with st.form("form_preguntas"):
        tema_investigacion = st.text_input("Tema principal de investigaci√≥n:", placeholder="Ej: impacto de las TIC en educaci√≥n")
        contexto = st.text_area("Contexto espec√≠fico (opcional):", placeholder="Ej: educaci√≥n superior en Am√©rica Latina")
        enfoque = st.selectbox("Enfoque metodol√≥gico preferido:", ["Cualitativo", "Cuantitativo", "Mixto", "No definido"])
        
        if st.form_submit_button("üéØ Generar Preguntas de Investigaci√≥n", type="primary"):
            if tema_investigacion:
                with st.spinner("Generando preguntas de investigaci√≥n..."):
                    time.sleep(1)
                    
                    preguntas = generar_preguntas_investigacion(tema_investigacion, {"contexto": contexto, "enfoque": enfoque})
                    
                    st.success("**üìã PREGUNTAS DE INVESTIGACI√ìN GENERADAS:**")
                    
                    for i, pregunta in enumerate(preguntas, 1):
                        st.write(f"**{i}.** {pregunta}")
                    
                    st.info("""
                    **üí° CRITERIOS DE BUENAS PREGUNTAS:**
                    ‚Ä¢ **Claras y espec√≠ficas** - Focalizadas en un aspecto concreto
                    ‚Ä¢ **Medibles** - Pueden responderse con metodolog√≠a apropiada  
                    ‚Ä¢ **Relevantes** - Contribuyen al campo de estudio
                    ‚Ä¢ **Factibles** - Posibles de investigar con recursos disponibles
                    ‚Ä¢ **Originales** - Abordan brechas de conocimiento existentes
                    """)

# HERRAMIENTA 4: Planificador de Metodolog√≠a
def herramienta_metodologia():
    st.header("üìä Planificador de Metodolog√≠a de Investigaci√≥n")
    
    with st.form("form_metodologia"):
        col1, col2 = st.columns(2)
        
        with col1:
            tema_estudio = st.text_input("Tema de estudio:", placeholder="Ej: bienestar estudiantil")
            tipo_estudio = st.selectbox(
                "Tipo de estudio:",
                ["Descriptivo", "Exploratorio", "Explicativo", "Experimental", "Cualitativo", "Mixto"]
            )
            
        with col2:
            poblacion = st.text_input("Poblaci√≥n o muestra:", placeholder="Ej: estudiantes universitarios")
            variables_principales = st.text_input("Variables principales:", placeholder="Ej: estr√©s acad√©mico, rendimiento")
        
        if st.form_submit_button("üìã Generar Plan Metodol√≥gico", type="primary"):
            if tema_estudio:
                with st.spinner("Dise√±ando metodolog√≠a de investigaci√≥n..."):
                    time.sleep(1)
                    
                    metodologia = sugerir_metodologia(tema_estudio, tipo_estudio.lower())
                    
                    st.success("**üìä PLAN METODOL√ìGICO RECOMENDADO:**")
                    
                    st.write(f"""
                    **CONTEXTO DE INVESTIGACI√ìN:**
                    ‚Ä¢ **Tema:** {tema_estudio}
                    ‚Ä¢ **Tipo de estudio:** {tipo_estudio}
                    ‚Ä¢ **Poblaci√≥n:** {poblacion if poblacion else "Por definir"}
                    ‚Ä¢ **Variables:** {variables_principales if variables_principales else "Por definir"}
                    """)
                    
                    st.write("**DISE√ëO METODOL√ìGICO:**")
                    for item in metodologia:
                        st.write(f"‚Ä¢ {item}")
                    
                    st.info("""
                    **üîç CONSIDERACIONES ADICIONALES:**
                    ‚Ä¢ **Validez y confiabilidad** de instrumentos
                    ‚Ä¢ **Consideraciones √©ticas** y consentimiento informado
                    ‚Ä¢ **Plan de an√°lisis de datos** apropiado
                    ‚Ä¢ **Limitaciones** potenciales del dise√±o
                    """)

# HERRAMIENTA 5: Estructurador de Trabajos
def herramienta_estructura():
    st.header("üìã Estructurador de Trabajos Acad√©micos")
    
    with st.form("form_estructura"):
        col1, col2 = st.columns(2)
        
        with col1:
            tipo_trabajo = st.selectbox(
                "Tipo de trabajo acad√©mico:",
                ["Tesis", "Art√≠culo cient√≠fico", "Tesina", "Monograf√≠a", "Reporte de investigaci√≥n"]
            )
            tema_principal = st.text_input("Tema principal del trabajo:")
            
        with col2:
            nivel_academico = st.selectbox(
                "Nivel acad√©mico:",
                ["Pregrado", "Maestr√≠a", "Doctorado", "Investigaci√≥n independiente"]
            )
            enfoque_metodologico = st.selectbox("Enfoque metodol√≥gico:", ["Cualitativo", "Cuantitativo", "Mixto", "Te√≥rico"])
        
        if st.form_submit_button("üèóÔ∏è Generar Estructura", type="primary"):
            if tema_principal:
                with st.spinner("Creando estructura del trabajo..."):
                    time.sleep(1)
                    
                    estructura = crear_estructura_trabajo(tipo_trabajo, tema_principal)
                    
                    st.success(f"**üìñ ESTRUCTURA PARA {tipo_trabajo.upper()} - {tema_principal.upper()}:**")
                    
                    for item in estructura:
                        st.write(f"‚Ä¢ {item}")
                    
                    st.info(f"""
                    **üí° RECOMENDACIONES PARA {tipo_trabajo.upper()}:**
                    ‚Ä¢ **Extensi√≥n aproximada:** {"40-60 p√°ginas" if tipo_trabajo == "Tesis" else "15-25 p√°ginas" if tipo_trabajo == "Art√≠culo cient√≠fico" else "25-40 p√°ginas"}
                    ‚Ä¢ **Citas requeridas:** {"60-100 referencias" if tipo_trabajo == "Tesis" else "20-40 referencias" if tipo_trabajo == "Art√≠culo cient√≠fico" else "30-50 referencias"}
                    ‚Ä¢ **Plazo estimado:** {"6-12 meses" if tipo_trabajo == "Tesis" else "1-3 meses" if tipo_trabajo == "Art√≠culo cient√≠fico" else "3-6 meses"}
                    """)

# HERRAMIENTA 6: Cronograma de Investigaci√≥n
def herramienta_cronograma():
    st.header("‚è±Ô∏è Cronograma de Investigaci√≥n")
    
    with st.form("form_cronograma"):
        col1, col2 = st.columns(2)
        
        with col1:
            duracion_meses = st.slider("Duraci√≥n total del proyecto (meses):", 3, 24, 6)
            fecha_inicio = st.date_input("Fecha de inicio estimada:")
            
        with col2:
            tipo_proyecto = st.selectbox(
                "Tipo de proyecto:",
                ["Tesis", "Art√≠culo cient√≠fico", "Proyecto de investigaci√≥n", "Estudio piloto"]
            )
            recursos_disponibles = st.multiselect(
                "Recursos disponibles:",
                ["Asesor", "Software especializado", "Acceso a bases de datos", "Financiamiento", "Equipo de trabajo"]
            )
        
        if st.form_submit_button("üìÖ Generar Cronograma", type="primary"):
            with st.spinner("Planificando cronograma de investigaci√≥n..."):
                time.sleep(1)
                
                fases = crear_cronograma_investigacion(duracion_meses)
                
                st.success("**üìä CRONOGRAMA DE INVESTIGACI√ìN:**")
                
                # Mostrar como tabla
                df = pd.DataFrame(fases)
                st.dataframe(df, use_container_width=True)
                
                # Mostrar detalles
                st.write("**üìã DETALLES POR FASE:**")
                for fase in fases:
                    with st.expander(f"{fase['fase']} ({fase['duracion']} mes{'es' if fase['duracion'] > 1 else ''})"):
                        st.write("**Actividades principales:**")
                        for actividad in fase['actividades']:
                            st.write(f"‚Ä¢ {actividad}")
                
                st.info(f"""
                **üí° DISTRIBUCI√ìN DE TIEMPO ({duracion_meses} meses total):**
                
                ‚Ä¢ **Preparaci√≥n (Fases 1-2):** {fases[0]['duracion'] + fases[1]['duracion']} meses
                ‚Ä¢ **Ejecuci√≥n (Fase 3):** {fases[2]['duracion']} meses  
                ‚Ä¢ **An√°lisis y escritura (Fases 4-5):** {fases[3]['duracion'] + fases[4]['duracion']} meses
                
                **üéØ CONSEJOS PARA CUMPLIMIENTO:**
                - Establece hitos espec√≠ficos por fase
                - Programa revisiones peri√≥dicas con asesor
                - Incluye tiempo extra para imprevistos (15-20%)
                - Documenta avances sistem√°ticamente
                """)

# Mostrar herramienta activa
if st.session_state.herramienta_activa == "ü§ñ Chatbot Principal":
    herramienta_chatbot()
elif st.session_state.herramienta_activa == "üîç Buscador de Art√≠culos":
    herramienta_buscador()
elif st.session_state.herramienta_activa == "üìù Generador de Preguntas":
    herramienta_preguntas()
elif st.session_state.herramienta_activa == "üìä Planificador de Metodolog√≠a":
    herramienta_metodologia()
elif st.session_state.herramienta_activa == "üìã Estructurador de Trabajos":
    herramienta_estructura()
elif st.session_state.herramienta_activa == "‚è±Ô∏è Cronograma de Investigaci√≥n":
    herramienta_cronograma()

# Pie de p√°gina
st.markdown("---")
st.caption("üîç Agente de Investigaci√≥n Inteligente v2.0 | Herramientas integradas | Art√≠culos verificables | ¬© 2024")
