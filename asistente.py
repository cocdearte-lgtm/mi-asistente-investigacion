# asistente_investigacion_ultra_simple.py
import streamlit as st
import requests
import time
from datetime import datetime
import io
import csv
import re

# Clase Agente con memoria
class AgenteConMemoria:
    def __init__(self):
        self.memoria = []
    
    def agregar_memoria(self, entrada, salida):
        self.memoria.append({"entrada": entrada, "salida": salida, "timestamp": datetime.now()})
    
    def obtener_memoria(self):
        return self.memoria
    
    def limpiar_memoria(self):
        self.memoria = []

# FUNCIONES DE B√öSQUEDA SIMULADAS (no necesitan dependencias externas)
def buscar_semantic_scholar(query, max_results=5):
    """B√∫squeda simulada en Semantic Scholar"""
    articulos = []
    
    # Datos de ejemplo realistas
    temas = query.lower().split()
    tema_principal = " ".join(temas[:2]) if temas else query
    
    ejemplos_articulos = [
        {
            "titulo": f"An√°lisis de {tema_principal} en contextos digitales: Una revisi√≥n sistem√°tica",
            "autor": "Garc√≠a, M., Rodr√≠guez, P., L√≥pez, A.",
            "a√±o": "2023",
            "publicacion": "Journal of Digital Innovation",
            "url": "https://example.com/article1",
            "fuente": "Semantic Scholar"
        },
        {
            "titulo": f"Impacto de {tema_principal} en la transformaci√≥n educativa contempor√°nea",
            "autor": "Smith, J., Johnson, L., Williams, R.",
            "a√±o": "2022", 
            "publicacion": "International Journal of Educational Technology",
            "url": "https://example.com/article2",
            "fuente": "Semantic Scholar"
        }
    ]
    
    for i in range(min(max_results, len(ejemplos_articulos))):
        articulos.append(ejemplos_articulos[i])
    
    time.sleep(1)
    return articulos

def buscar_scielo(query, max_results=5):
    """B√∫squeda simulada en SciELO"""
    articulos = []
    
    temas = query.lower().split()
    tema_principal = " ".join(temas[:2]) if temas else query
    
    ejemplos_articulos = [
        {
            "titulo": f"{tema_principal.title()} en Am√©rica Latina: Un an√°lisis regional",
            "autor": "Silva, A., Costa, M., Rojas, P.",
            "a√±o": "2023",
            "publicacion": "Revista Latinoamericana de Estudios Educativos",
            "url": "https://scielo.example.com/article1",
            "fuente": "SciELO"
        },
        {
            "titulo": f"Aproximaciones metodol√≥gicas al estudio de {tema_principal} en contextos diversos",
            "autor": "Fern√°ndez, L., Ortega, R., Mendoza, S.",
            "a√±o": "2022",
            "publicacion": "Investigaci√≥n Educativa",
            "url": "https://scielo.example.com/article2",
            "fuente": "SciELO"
        }
    ]
    
    for i in range(min(max_results, len(ejemplos_articulos))):
        articulos.append(ejemplos_articulos[i])
    
    time.sleep(1)
    return articulos

# FUNCIONES DE PROCESAMIENTO
def extraer_tema_principal(user_input):
    """Extrae el tema real de investigaci√≥n del input del usuario"""
    try:
        patron_pregunta = r'[¬ø]?(qu√©|cuales|como|por qu√©|d√≥nde|cu√°ndo)\s+([^?]+)[?]'
        coincidencia = re.search(patron_pregunta, user_input.lower())
        
        if coincidencia:
            return coincidencia.group(2).strip()
        
        palabras_excluir = ['formula', 'planteamiento', 'problema', 'interrogante', 
                           'redacta', 'elabora', 'desarrolla', 'haz', 'crea', 'genera',
                           'para la', 'sobre', 'acerca de', 'necesito', 'quiero']
        
        tema = user_input.lower()
        for palabra in palabras_excluir:
            tema = tema.replace(palabra, '')
        
        tema = re.sub(r'[^\w\s]', '', tema)
        tema = ' '.join(tema.split())
        
        return tema.strip() if tema.strip() else user_input
    except Exception:
        return user_input

def detectar_tipo_solicitud(user_input):
    """Detecta el tipo de solicitud del usuario"""
    input_lower = user_input.lower()
    
    if any(palabra in input_lower for palabra in ['planteamiento', 'problema', 'pregunta investigaci√≥n']):
        return "planteamiento"
    elif any(palabra in input_lower for palabra in ['objetivos', 'metas', 'prop√≥sitos']):
        return "objetivos"
    elif any(palabra in input_lower for palabra in ['metodolog√≠a', 'm√©todo', 'dise√±o', 'enfoque']):
        return "metodologia"
    elif any(palabra in input_lower for palabra in ['variables', 'operacional']):
        return "variables"
    elif any(palabra in input_lower for palabra in ['resumen', 's√≠ntesis', 'analizar']):
        return "resumen"
    else:
        return "general"

# FUNCIONES DE GENERACI√ìN
def generar_planteamiento_estructurado(tema, contexto=""):
    """Genera un planteamiento del problema bien estructurado"""
    return f"""
# PLANTEAMIENTO DEL PROBLEMA: {tema.title()}

## DESCRIPCI√ìN DEL PROBLEMA
La acelerada transformaci√≥n digital ha generado una disrupci√≥n significativa en las competencias requeridas. Existe una brecha creciente entre las habilidades que poseen los individuos y las demandadas por entornos tecnificados.

## JUSTIFICACI√ìN
La identificaci√≥n de competencias esenciales resulta urgente por:
- **Relevancia econ√≥mica**: La brecha de habilidades representa un costo significativo
- **Inclusi√≥n social**: La falta de competencias puede exacerbar desigualdades
- **Sostenibilidad laboral**: La evoluci√≥n tecnol√≥gica requiere reconversi√≥n constante

## PREGUNTAS DE INVESTIGACI√ìN
1. ¬øQu√© competencias espec√≠ficas son cr√≠ticas para la resiliencia profesional?
2. ¬øC√≥mo se articulan las competencias t√©cnicas con habilidades socioemocionales?
3. ¬øQu√© estrategias de desarrollo demuestran mayor efectividad?
"""

def generar_objetivos_estructurados(tema, contexto=""):
    """Genera objetivos de investigaci√≥n estructurados"""
    contexto_texto = contexto if contexto else "diversos escenarios"
    return f"""
OBJETIVO GENERAL:
Analizar los aspectos fundamentales de {tema} en el contexto de {contexto_texto} para proponer estrategias de mejora e innovaci√≥n.

OBJETIVOS ESPEC√çFICOS:

1. **Identificar y caracterizar** los componentes clave asociados con {tema}

2. **Diagnosticar el estado actual** mediante el an√°lisis de tendencias y desaf√≠os

3. **Evaluar el impacto** de {tema} en diferentes √°mbitos

4. **Dise√±ar y proponer** estrategias innovadoras basadas en evidencia
"""

# FUNCI√ìN DE CHAT PRINCIPAL
def chat_con_agente(agente, user_input, contexto_usuario=""):
    """Funci√≥n principal del chat completamente funcional"""
    try:
        tema_real = extraer_tema_principal(user_input)
        tipo_solicitud = detectar_tipo_solicitud(user_input)
        
        st.info(f"üîç **Tema detectado:** {tema_real}")
        if contexto_usuario:
            st.info(f"üéØ **Contexto considerado:** {contexto_usuario}")
        
        # Generar respuesta seg√∫n el tipo de solicitud
        if tipo_solicitud == "planteamiento":
            respuesta = generar_planteamiento_estructurado(tema_real, contexto_usuario)
        elif tipo_solicitud == "objetivos":
            respuesta = generar_objetivos_estructurados(tema_real, contexto_usuario)
        elif tipo_solicitud == "metodologia":
            respuesta = f"## üéì SUGERENCIAS METODOL√ìGICAS PARA: {tema_real}\n\n**Enfoque recomendado:** Investigaci√≥n mixta\n**Dise√±o:** Secuencial explicativo\n**T√©cnicas:** Encuestas, entrevistas, an√°lisis documental"
        elif tipo_solicitud == "variables":
            respuesta = f"## üî¨ VARIABLES PARA: {tema_real}\n\n**Variables independientes:** Nivel de implementaci√≥n, caracter√≠sticas contextuales\n**Variables dependientes:** Impacto en resultados, grado de adopci√≥n"
        else:
            respuesta = f"**üí° Respuesta sobre: {tema_real}**\n\nPuedo ayudarte con:\n- Planteamiento del problema\n- Objetivos de investigaci√≥n\n- Metodolog√≠a\n- Variables operativas\n\n¬øEn qu√© aspecto espec√≠fico necesitas ayuda?"
        
        # Guardar en memoria
        agente.agregar_memoria(user_input, respuesta)
        return respuesta
        
    except Exception as e:
        return f"‚ùå Error en el procesamiento: {str(e)}"

# FUNCI√ìN PRINCIPAL DE STREAMLIT
def main():
    st.set_page_config(
        page_title="Asistente de Investigaci√≥n",
        page_icon="üî¨",
        layout="wide"
    )
    
    # CSS simple
    st.markdown("""
    <style>
    .main-header {
        text-align: center;
        padding: 20px;
        background: #f0f2f6;
        border-radius: 10px;
        margin-bottom: 20px;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üî¨ Asistente de Investigaci√≥n Acad√©mica</h1>
        <p>Herramienta inteligente para el desarrollo de proyectos de investigaci√≥n</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Inicializar session state
    if 'articulos' not in st.session_state:
        st.session_state.articulos = []
    if 'agente' not in st.session_state:
        st.session_state.agente = AgenteConMemoria()
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    # Pesta√±as principales
    tab1, tab2, tab3 = st.tabs(["üè† Inicio", "üîç B√∫squeda", "üí¨ Chat"])
    
    with tab1:
        st.markdown("### üöÄ ¬øQu√© puedes hacer?")
        st.markdown("""
        - **Chat inteligente** con procesamiento de lenguaje natural
        - **B√∫squeda acad√©mica** simulada en bases de datos
        - **Generaci√≥n autom√°tica** de elementos de investigaci√≥n
        - **Exportaci√≥n** de resultados
        """)
        
        st.markdown("### üí° Ejemplos de preguntas:")
        st.code("""
"Formula el planteamiento sobre competencias digitales"
"Genera objetivos para investigaci√≥n sobre IA en educaci√≥n" 
"Sugiere metodolog√≠a para estudiar impacto de redes sociales"
        """)
    
    with tab2:
        st.markdown("### üîç B√∫squeda Acad√©mica")
        
        consulta = st.text_input(
            "Tema de investigaci√≥n:",
            value="competencias digitales",
            placeholder="Escribe tu tema de investigaci√≥n..."
        )
        
        if st.button("üöÄ Buscar Art√≠culos"):
            with st.spinner("Buscando en bases acad√©micas..."):
                articulos_ss = buscar_semantic_scholar(consulta)
                articulos_scielo = buscar_scielo(consulta)
                
                st.session_state.articulos = articulos_ss + articulos_scielo
                
                st.success(f"‚úÖ Encontrados {len(st.session_state.articulos)} art√≠culos")
                
                for art in st.session_state.articulos:
                    st.markdown(f"**{art['titulo']}**")
                    st.markdown(f"*{art['autor']}* - {art['a√±o']}")
                    st.markdown(f"Fuente: {art['fuente']}")
                    st.markdown("---")
    
    with tab3:
        st.markdown("### üí¨ Chat con el Agente")
        
        # Contexto
        contexto = st.text_input(
            "Contexto de investigaci√≥n (opcional):",
            placeholder="Ej: educaci√≥n superior, empresas tecnol√≥gicas..."
        )
        
        # Mostrar historial
        for mensaje in st.session_state.chat_history:
            with st.chat_message(mensaje["role"]):
                st.markdown(mensaje["content"])
        
        # Input de chat
        prompt = st.chat_input("Escribe tu pregunta sobre investigaci√≥n...")
        
        if prompt:
            # Agregar mensaje del usuario
            st.session_state.chat_history.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)
            
            # Respuesta del agente
            with st.chat_message("assistant"):
                with st.spinner("Generando respuesta..."):
                    respuesta = chat_con_agente(st.session_state.agente, prompt, contexto)
                    st.markdown(respuesta)
            
            st.session_state.chat_history.append({"role": "assistant", "content": respuesta})

if __name__ == "__main__":
    main()
