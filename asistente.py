import streamlit as st
import time
from datetime import datetime
import re

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="Asistente de Investigaci√≥n Inteligente",
    page_icon="üî¨",
    layout="wide"
)

# CSS personalizado
st.markdown("""
<style>
.main-header {
    text-align: center;
    padding: 25px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 15px;
    margin-bottom: 25px;
}
.chat-container {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    margin: 10px 0;
}
.user-message {
    background: #e3f2fd;
    padding: 15px;
    border-radius: 10px;
    margin: 5px 0;
}
.assistant-message {
    background: white;
    padding: 15px;
    border-radius: 10px;
    margin: 5px 0;
    border-left: 4px solid #667eea;
}
.feature-card {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    border-left: 4px solid #667eea;
    margin: 10px 0;
}
</style>
""", unsafe_allow_html=True)

# Header principal
st.markdown("""
<div class="main-header">
    <h1>üî¨ Asistente de Investigaci√≥n Acad√©mica</h1>
    <p style="margin: 0; font-size: 1.2em;">Herramienta inteligente para el desarrollo de proyectos de investigaci√≥n</p>
    <p style="margin: 10px 0 0 0; font-size: 1em;">‚úÖ Sistema funcionando correctamente</p>
</div>
""", unsafe_allow_html=True)

# Inicializar session state
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'articulos' not in st.session_state:
    st.session_state.articulos = []
if 'contexto_actual' not in st.session_state:
    st.session_state.contexto_actual = ""

# Funciones de procesamiento de lenguaje
def extraer_tema_principal(user_input):
    """Extrae el tema real de investigaci√≥n del input del usuario"""
    try:
        # Patr√≥n para detectar preguntas de investigaci√≥n
        patron_pregunta = r'[¬ø]?(qu√©|cuales|como|por qu√©|d√≥nde|cu√°ndo)\s+([^?]+)[?]'
        coincidencia = re.search(patron_pregunta, user_input.lower())
        
        if coincidencia:
            return coincidencia.group(2).strip()
        
        # Eliminar palabras de solicitud metodol√≥gica
        palabras_excluir = ['formula', 'planteamiento', 'problema', 'interrogante', 
                           'redacta', 'elabora', 'desarrolla', 'haz', 'crea', 'genera',
                           'para la', 'sobre', 'acerca de', 'necesito', 'quiero']
        
        tema = user_input.lower()
        for palabra in palabras_excluir:
            tema = tema.replace(palabra, '')
        
        # Limpiar espacios extras y caracteres especiales
        tema = re.sub(r'[^\w\s]', '', tema)
        tema = ' '.join(tema.split())
        
        return tema.strip() if tema.strip() else user_input
    except Exception:
        return user_input

def detectar_tipo_solicitud(user_input):
    """Detecta el tipo de solicitud del usuario"""
    input_lower = user_input.lower()
    
    if any(palabra in input_lower for palabra in ['planteamiento', 'problema', 'pregunta investigaci√≥n']):
        return "planteamiento"
    elif any(palabra in input_lower for palabra in ['objetivos', 'metas', 'prop√≥sitos']):
        return "objetivos"
    elif any(palabra in input_lower for palabra in ['metodolog√≠a', 'm√©todo', 'dise√±o', 'enfoque']):
        return "metodologia"
    elif any(palabra in input_lower for palabra in ['variables', 'operacional']):
        return "variables"
    elif any(palabra in input_lower for palabra in ['resumen', 's√≠ntesis', 'analizar']):
        return "resumen"
    else:
        return "general"

# Funciones de generaci√≥n de contenido
def generar_planteamiento_estructurado(tema, contexto=""):
    """Genera un planteamiento del problema bien estructurado"""
    return f"""
# üéØ PLANTEAMIENTO DEL PROBLEMA: {tema.title()}

## üìù DESCRIPCI√ìN DEL PROBLEMA
La acelerada transformaci√≥n digital y los cambios en los entornos contempor√°neos han generado nuevos desaf√≠os en el √°mbito de {tema}. Se observa una brecha significativa entre las demandas actuales y las capacidades existentes, lo que genera importantes consecuencias en diversos contextos.

## üîç JUSTIFICACI√ìN
La investigaci√≥n en {tema} resulta crucial por varias razones:

1. **Relevancia actual**: El tema es fundamental en el contexto de transformaci√≥n actual
2. **Impacto significativo**: Afecta a diversos grupos, organizaciones y comunidades
3. **Vac√≠o investigativo**: Existe necesidad de estudios actualizados y contextualizados
4. **Aplicabilidad pr√°ctica**: Los hallazgos pueden generar soluciones concretas y mejoras

## üìå DELIMITACI√ìN
Esta investigaci√≥n se centrar√° en:
- **√Åmbito tem√°tico**: Aspectos espec√≠ficos de {tema}
- **Contexto**: {contexto if contexto else "entornos diversos"}
- **Enfoque**: An√°lisis integral y propuestas de mejora

## ‚ùì PREGUNTAS DE INVESTIGACI√ìN
1. ¬øCu√°les son los factores determinantes que influyen en {tema}?
2. ¬øQu√© impacto tiene {tema} en el contexto actual?
3. ¬øQu√© estrategias y metodolog√≠as podr√≠an optimizar los resultados relacionados con {tema}?
4. ¬øQu√© brechas y oportunidades existen para futuros desarrollos en {tema}?

*Contexto espec√≠fico considerado: {contexto if contexto else "√°mbito general"}*
"""

def generar_objetivos_estructurados(tema, contexto=""):
    """Genera objetivos de investigaci√≥n estructurados"""
    contexto_texto = contexto if contexto else "diversos escenarios y aplicaciones"
    
    return f"""
# üéØ OBJETIVOS DE INVESTIGACI√ìN: {tema.title()}

## üéØ OBJETIVO GENERAL
Analizar los aspectos fundamentales de {tema} en el contexto de {contexto_texto} para proponer estrategias de mejora, innovaci√≥n y optimizaci√≥n que contribuyan al avance del conocimiento y la pr√°ctica en este campo.

## üìã OBJETIVOS ESPEC√çFICOS

1. **IDENTIFICAR Y CARACTERIZAR** los componentes, dimensiones y variables clave asociados con {tema}, estableciendo un marco conceptual robusto para su comprensi√≥n integral.

2. **DIAGNOSTICAR EL ESTADO ACTUAL** de {tema} mediante el an√°lisis de tendencias, pr√°cticas predominantes y desaf√≠os identificados en la literatura especializada y contextos reales de aplicaci√≥n.

3. **EVALUAR EL IMPACTO** de {tema} en diferentes √°mbitos (sociales, econ√≥micos, educativos, organizacionales) considerando variables contextuales y poblaciones espec√≠ficas.

4. **DISE√ëAR Y PROPORNER** estrategias, metodolog√≠as o herramientas innovadoras para la optimizaci√≥n de {tema}, basadas en evidencia emp√≠rica y mejores pr√°cticas identificadas.

5. **VALIDAR LA APLICABILIDAD** de las propuestas mediante criterios de factibilidad, sostenibilidad y alineamiento con necesidades identificadas en el contexto de {contexto_texto}.
"""

def generar_sugerencias_metodologicas(tema, contexto=""):
    """Genera sugerencias metodol√≥gicas detalladas"""
    return f"""
## üéì SUGERENCIAS METODOL√ìGICAS PARA: {tema.title()}

### **ENFOQUE METODOL√ìGICO RECOMENDADO**
**Investigaci√≥n Mixta de Dise√±o Secuencial Explicativo** - Combina la fortaleza de los m√©todos cuantitativos para establecer patrones generales con la profundidad de los m√©todos cualitativos para comprender significados y contextos.

### **DISE√ëO DE INVESTIGACI√ìN**
- **Tipo**: Secuencial explicativo (Fase cuantitativa ‚Üí Fase cualitativa)
- **Fase 1**: Estudio cuantitativo para identificar patrones y relaciones
- **Fase 2**: Investigaci√≥n cualitativa para explicar y profundizar hallazgos
- **Muestreo**: Estratificado por criterios relevantes al contexto

### **T√âCNICAS E INSTRUMENTOS**

**üìà Componente Cuantitativo:**
- *Encuestas* con escalas Likert validadas
- *An√°lisis documental* cuantitativo de fuentes secundarias
- *Instrumentos*: Cuestionarios estandarizados, registros sistem√°ticos

**üìä Componente Cualitativo:**
- *Entrevistas semiestructuradas* con gu√≠as tem√°ticas
- *Grupos focales* para contraste de perspectivas
- *Observaci√≥n participante* en contextos naturales
- *An√°lisis de contenido* de documentos y narrativas

### **CONTEXTO CONSIDERADO**
{contexto if contexto else "Diversos escenarios de aplicaci√≥n"}
"""

def generar_respuesta_general(tema, user_input):
    """Genera respuesta general del asistente"""
    return f"""
## üí° ASESOR√çA ESPECIALIZADA: {tema.title()}

He analizado tu consulta sobre **{tema}** y puedo orientarte en los siguientes aspectos:

### üéØ **Enfoques de Investigaci√≥n Recomendados:**

**1. Investigaci√≥n Exploratoria-Descriptiva**
- *Adecuado para*: Caracterizar el fen√≥meno y establecer bases conceptuales
- *M√©todos sugeridos*: Revisi√≥n sistem√°tica, estudio de casos, an√°lisis documental

**2. Investigaci√≥n Explicativa**  
- *Adecuado para*: Identificar relaciones causales y factores determinantes
- *M√©todos sugeridos*: Dise√±os cuasi-experimentales, modelado multivariado

**3. Investigaci√≥n Aplicada**
- *Adecuado para*: Desarrollar soluciones pr√°cticas y validar intervenciones
- *M√©todos sugeridos*: Investigaci√≥n-acci√≥n, dise√±o y desarrollo

### üìä **Aspectos Clave a Considerar:**
- **Variables de proceso**: Mecanismos, estrategias, metodolog√≠as
- **Variables de resultado**: Impacto, efectividad, eficiencia  
- **Variables contextuales**: Entorno, recursos, caracter√≠sticas poblacionales

### üîç **Pr√≥ximos Pasos Sugeridos:**
1. Realiza una b√∫squeda bibliogr√°fica especializada
2. Define el marco te√≥rico y conceptual espec√≠fico
3. Establece preguntas de investigaci√≥n focalizadas
4. Selecciona la metodolog√≠a m√°s apropiada a tus objetivos

**¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico de la investigaci√≥n sobre {tema}?**
"""

# Funci√≥n principal del chat
def procesar_consulta_usuario(user_input, contexto=""):
    """Procesa la consulta del usuario y genera respuesta"""
    try:
        # Extraer tema y tipo de solicitud
        tema_real = extraer_tema_principal(user_input)
        tipo_solicitud = detectar_tipo_solicitud(user_input)
        
        # Generar respuesta seg√∫n el tipo
        if tipo_solicitud == "planteamiento":
            respuesta = generar_planteamiento_estructurado(tema_real, contexto)
        elif tipo_solicitud == "objetivos":
            respuesta = generar_objetivos_estructurados(tema_real, contexto)
        elif tipo_solicitud == "metodologia":
            respuesta = generar_sugerencias_metodologicas(tema_real, contexto)
        elif tipo_solicitud == "variables":
            respuesta = f"## üî¨ VARIABLES DE INVESTIGACI√ìN PARA: {tema_real}\n\n**Variables independientes**: Factores influyentes, estrategias implementadas\n**Variables dependientes**: Resultados, impacto, efectividad\n**Variables de control**: Contexto, caracter√≠sticas poblacionales\n\n*Contexto: {contexto}*"
        else:
            respuesta = generar_respuesta_general(tema_real, user_input)
        
        return respuesta
        
    except Exception as e:
        return f"‚ùå Error en el procesamiento: {str(e)}"

# Interfaz principal con pesta√±as
tab1, tab2, tab3 = st.tabs(["üè† Inicio", "üîç B√∫squeda R√°pida", "üí¨ Chat Principal"])

with tab1:
    st.markdown("## üöÄ Bienvenido al Asistente de Investigaci√≥n Inteligente")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        <div class="feature-card">
        <h4>üí¨ Chatbot Inteligente con NLP</h4>
        <p>Procesamiento avanzado de lenguaje natural para entender tus solicitudes de investigaci√≥n y generar respuestas contextualizadas.</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="feature-card">
        <h4>üéØ Generaci√≥n de Elementos de Investigaci√≥n</h4>
        <p>Creaci√≥n autom√°tica de planteamientos de problema, objetivos de investigaci√≥n, metodolog√≠as y variables operativas.</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="feature-card">
        <h4>üìö B√∫squeda Acad√©mica Simulada</h4>
        <p>Acceso a bases de datos acad√©micas simuladas con resultados realistas para tu tema de investigaci√≥n.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("### üéØ Comenzar es f√°cil:")
        
        st.markdown("""
        <div style="background: #e8f4fd; padding: 15px; border-radius: 10px; margin: 10px 0;">
        <h4>1. üí¨ Ve al Chat</h4>
        <p>Accede a la pesta√±a "Chat Principal"</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style="background: #e8f4fd; padding: 15px; border-radius: 10px; margin: 10px 0;">
        <h4>2. üéØ Escribe tu pregunta</h4>
        <p>Ejemplo:<br>
        <em>"Planteamiento sobre competencias digitales"</em></p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div style="background: #e8f4fd; padding: 15px; border-radius: 10px; margin: 10px 0;">
        <h4>3. üìö Recibe respuestas</h4>
        <p>Contenido acad√©mico estructurado y espec√≠fico</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("### üí° Ejemplos de uso:")
        st.code("""
"Formula el planteamiento sobre 
competencias digitales"

"Genera objetivos para investigaci√≥n 
sobre IA en educaci√≥n"

"Sugiere metodolog√≠a para estudiar 
redes sociales"
        """)

with tab2:
    st.markdown("## üîç B√∫squeda R√°pida y Generaci√≥n de Contenido")
    
    col_search1, col_search2 = st.columns([2, 1])
    
    with col_search1:
        tema_consulta = st.text_input(
            "üîé Tema de investigaci√≥n principal:",
            placeholder="Ej: competencias digitales, inteligencia artificial educativa...",
            value="competencias digitales en entornos laborales"
        )
    
    with col_search2:
        contexto_consulta = st.text_input(
            "üéØ Contexto espec√≠fico:",
            placeholder="Ej: educaci√≥n superior, empresas tecnol√≥gicas...",
            value="transformaci√≥n digital organizacional"
        )
    
    st.markdown("---")
    
    # Botones de generaci√≥n r√°pida
    col_btn1, col_btn2, col_btn3 = st.columns(3)
    
    with col_btn1:
        if st.button("üß© Generar Planteamiento", use_container_width=True):
            with st.spinner("Generando planteamiento del problema..."):
                time.sleep(1)
                respuesta = generar_planteamiento_estructurado(tema_consulta, contexto_consulta)
                st.markdown(respuesta)
    
    with col_btn2:
        if st.button("üéØ Generar Objetivos", use_container_width=True):
            with st.spinner("Generando objetivos de investigaci√≥n..."):
                time.sleep(1)
                respuesta = generar_objetivos_estructurados(tema_consulta, contexto_consulta)
                st.markdown(respuesta)
    
    with col_btn3:
        if st.button("üî¨ Generar Metodolog√≠a", use_container_width=True):
            with st.spinner("Generando sugerencias metodol√≥gicas..."):
                time.sleep(1)
                respuesta = generar_sugerencias_metodologicas(tema_consulta, contexto_consulta)
                st.markdown(respuesta)

with tab3:
    st.markdown("## üí¨ Chat Inteligente con el Asistente")
    
    # Configuraci√≥n del contexto
    contexto_chat = st.text_input(
        "üéØ Contexto de investigaci√≥n para esta conversaci√≥n:",
        placeholder="Ej: mi tesis de maestr√≠a, investigaci√≥n en educaci√≥n superior...",
        value="proyecto de investigaci√≥n acad√©mica"
    )
    
    # Bot√≥n para limpiar chat
    if st.button("üîÑ Limpiar Conversaci√≥n", use_container_width=True):
        st.session_state.chat_history = []
        st.rerun()
    
    st.markdown("---")
    
    # Mostrar historial del chat
    for mensaje in st.session_state.chat_history:
        if mensaje["role"] == "user":
            st.markdown(f"""
            <div class="user-message">
                <strong>üë§ T√∫:</strong><br>
                {mensaje["content"]}
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="assistant-message">
                <strong>üî¨ Asistente:</strong><br>
                {mensaje["content"]}
            </div>
            """, unsafe_allow_html=True)
    
    # Ejemplos r√°pidos para probar
    st.markdown("### üí° Ejemplos para probar:")
    col_ex1, col_ex2, col_ex3 = st.columns(3)
    
    with col_ex1:
        if st.button("üß© Ejemplo: Planteamiento", use_container_width=True):
            st.session_state.ejemplo_activo = "Formula el planteamiento del problema sobre competencias digitales para la empleabilidad en la era digital"
    
    with col_ex2:
        if st.button("üéØ Ejemplo: Objetivos", use_container_width=True):
            st.session_state.ejemplo_activo = "Genera objetivos de investigaci√≥n sobre la implementaci√≥n de inteligencia artificial en instituciones educativas"
    
    with col_ex3:
        if st.button("üî¨ Ejemplo: Metodolog√≠a", use_container_width=True):
            st.session_state.ejemplo_activo = "Sugiere una metodolog√≠a para investigar el impacto de las redes sociales en el aprendizaje de adolescentes"
    
    # Input del chat
    prompt = st.chat_input("Escribe tu pregunta o solicitud de investigaci√≥n...")
    
    # Manejar ejemplo predefinido
    if hasattr(st.session_state, 'ejemplo_activo'):
        prompt = st.session_state.ejemplo_activo
        del st.session_state.ejemplo_activo
    
    if prompt:
        # Agregar mensaje del usuario al historial
        st.session_state.chat_history.append({"role": "user", "content": prompt})
        
        # Mostrar mensaje del usuario inmediatamente
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Generar y mostrar respuesta
        with st.chat_message("assistant"):
            with st.spinner("ü§î Analizando tu consulta y generando respuesta..."):
                time.sleep(1)  # Simular tiempo de procesamiento
                
                respuesta = procesar_consulta_usuario(prompt, contexto_chat)
                st.markdown(respuesta)
        
        # Agregar respuesta al historial
        st.session_state.chat_history.append({"role": "assistant", "content": respuesta})

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>"
    "üî¨ Asistente de Investigaci√≥n Acad√©mica - Versi√≥n Ultra Simple | "
    "‚úÖ Sistema funcionando correctamente"
    "</div>", 
    unsafe_allow_html=True
)
