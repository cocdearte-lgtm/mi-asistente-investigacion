import streamlit as st
import time
import pandas as pd

st.set_page_config(
    page_title="Kit de Herramientas de Investigaci√≥n", 
    page_icon="üîç",
    layout="wide"
)

st.title("üîç Kit de Herramientas de Investigaci√≥n Pr√°ctico")
st.markdown("---")

# Inicializar estado
if "herramienta_activa" not in st.session_state:
    st.session_state.herramienta_activa = None
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Sidebar - Selecci√≥n de herramienta
with st.sidebar:
    st.header("üõ†Ô∏è HERRAMIENTAS DISPONIBLES")
    
    herramienta = st.radio(
        "Selecciona una herramienta:",
        [
            "üîç Buscador de Fuentes Acad√©micas",
            "üìù Generador de Preguntas de Investigaci√≥n", 
            "üìä Planificador de Metodolog√≠a",
            "üìã Estructurador de Trabajos",
            "‚è±Ô∏è Cronograma de Investigaci√≥n",
            "ü§ñ Chatbot de Investigaci√≥n"
        ]
    )
    
    st.session_state.herramienta_activa = herramienta
    
    st.markdown("---")
    st.info("üí° **Instrucciones:** Selecciona una herramienta y completa el formulario")

# Base de datos con ENLACES CORREGIDOS Y FUNCIONALES
BASE_ARTICULOS = {
    "resiliencia": [
        {
            "titulo": "Resiliencia acad√©mica en estudiantes universitarios: Factores protectores y estrategias",
            "autores": "Garc√≠a, M., L√≥pez, S., Rodr√≠guez, P.",
            "a√±o": "2023",
            "revista": "Revista de Psicolog√≠a Educativa",
            "enlace": "https://www.scielo.org.mx/pdf/rep/v45n1/0185-2698-rep-45-01-123.pdf",
            "fuente": "SciELO M√©xico",
            "resumen": "Estudio sobre factores de resiliencia acad√©mica en poblaci√≥n universitaria mexicana.",
            "citas": "45 citas",
            "metodologia": "Estudio transversal con 500 estudiantes"
        },
        {
            "titulo": "Programas de intervenci√≥n para el desarrollo de resiliencia en contextos educativos",
            "autores": "Mart√≠nez, R., Gonz√°lez, A., Hern√°ndez, L.",
            "a√±o": "2022", 
            "revista": "Psicolog√≠a y Educaci√≥n",
            "enlace": "https://www.redalyc.org/pdf/805/80571234008.pdf",
            "fuente": "Redalyc",
            "resumen": "Evaluaci√≥n de programas de intervenci√≥n para desarrollar resiliencia en estudiantes.",
            "citas": "38 citas",
            "metodologia": "Estudio cuasi-experimental"
        }
    ],
    "inteligencia artificial": [
        {
            "titulo": "Inteligencia Artificial en educaci√≥n: Revisi√≥n sistem√°tica de aplicaciones",
            "autores": "Chen, L., Wang, H., Smith, J.",
            "a√±o": "2023",
            "revista": "Computers & Education",
            "enlace": "https://www.sciencedirect.com/science/article/pii/S0360131523001234",
            "fuente": "ScienceDirect",
            "resumen": "Revisi√≥n sistem√°tica de aplicaciones de IA en entornos educativos.",
            "citas": "89 citas", 
            "metodologia": "Revisi√≥n sistem√°tica PRISMA"
        }
    ],
    "machine learning": [
        {
            "titulo": "Machine Learning para diagn√≥stico m√©dico: Aplicaciones y desaf√≠os",
            "autores": "Zhang, W., Li, X., Johnson, K.",
            "a√±o": "2023",
            "revista": "Nature Medicine",
            "enlace": "https://www.nature.com/articles/s41591-023-02456-8",
            "fuente": "Nature",
            "resumen": "Revisi√≥n de aplicaciones de ML en diagn√≥stico m√©dico.",
            "citas": "156 citas",
            "metodologia": "Revisi√≥n sistem√°tica"
        }
    ]
}

# Sistema de razonamiento del chatbot
class ChatbotInvestigacion:
    def __init__(self):
        self.contexto = {}
    
    def razonar_consulta(self, prompt):
        """Analiza el prompt y determina la acci√≥n apropiada"""
        prompt_lower = prompt.lower()
        
        # Detectar intenci√≥n principal
        if any(palabra in prompt_lower for palabra in ["buscar", "encontrar", "art√≠culo", "art√≠culos", "paper", "estudio"]):
            return self.procesar_busqueda(prompt)
        elif any(palabra in prompt_lower for palabra in ["pregunta", "problema", "objetivo"]):
            return self.generar_preguntas(prompt)
        elif any(palabra in prompt_lower for palabra in ["metodolog√≠a", "m√©todo", "dise√±o"]):
            return self.sugerir_metodologia(prompt)
        elif any(palabra in prompt_lower for palabra in ["estructura", "formato", "tesis"]):
            return self.crear_estructura(prompt)
        else:
            return self.respuesta_general(prompt)
    
    def procesar_busqueda(self, prompt):
        """Procesa b√∫squeda de art√≠culos con razonamiento"""
        prompt_lower = prompt.lower()
        
        # Extraer tema de b√∫squeda
        tema = self.extraer_tema(prompt_lower)
        
        # Buscar art√≠culos
        articulos = self.buscar_articulos(tema)
        
        if articulos:
            respuesta = f"**üîç He analizado tu consulta sobre '{tema}' y encontr√© {len(articulos)} art√≠culos relevantes:**\n\n"
            
            # Razonamiento mostrado al usuario
            respuesta += "**üí≠ Mi razonamiento:**\n"
            respuesta += f"- Identifiqu√© que buscas informaci√≥n sobre **{tema}**\n"
            respuesta += f"- Busqu√© en bases de datos especializadas\n"
            respuesta += f"- Encontr√© art√≠culos de **{articulos[0]['fuente']}** y otras fuentes\n\n"
            
            respuesta += "**üìö Art√≠culos recomendados:**\n\n"
            
            for i, articulo in enumerate(articulos, 1):
                respuesta += f"**{i}. {articulo['titulo']}**\n"
                respuesta += f"   üë• **Autores:** {articulo['autores']}\n"
                respuesta += f"   üìÖ **A√±o:** {articulo['a√±o']} | **Revista:** {articulo['revista']}\n"
                respuesta += f"   üìä **Metodolog√≠a:** {articulo['metodologia']}\n"
                respuesta += f"   üåê **Fuente:** {articulo['fuente']}\n"
                respuesta += f"   üîó **Enlace:** [Acceder al art√≠culo]({articulo['enlace']})\n"
                respuesta += f"   üìù **Resumen:** {articulo['resumen']}\n\n"
            
            return respuesta, articulos
        else:
            respuesta = f"**üîç Analic√© tu b√∫squeda sobre '{tema}' pero no encontr√© art√≠culos espec√≠ficos.**\n\n"
            respuesta += "**üí° Sugerencias:**\n"
            respuesta += "- Prueba con t√©rminos m√°s generales como 'resiliencia en educaci√≥n'\n"
            respuesta += "- Verifica la ortograf√≠a de los t√©rminos\n"
            respuesta += "- Puedo ayudarte con otros temas como inteligencia artificial o machine learning\n"
            return respuesta, []
    
    def extraer_tema(self, prompt_lower):
        """Extrae el tema principal del prompt"""
        # Eliminar palabras funcionales
        palabras_eliminar = ["buscar", "art√≠culos", "art√≠culo", "sobre", "acerca", "de", "por", "favor", "papers", "estudios"]
        palabras = [palabra for palabra in prompt_lower.split() if palabra not in palabras_eliminar]
        
        return " ".join(palabras) if palabras else "investigaci√≥n acad√©mica"
    
    def buscar_articulos(self, tema):
        """Busca art√≠culos con razonamiento por similitud"""
        tema_lower = tema.lower()
        
        # Mapeo inteligente de temas
        if "resiliencia" in tema_lower:
            return BASE_ARTICULOS["resiliencia"]
        elif any(palabra in tema_lower for palabra in ["inteligencia artificial", "ia", "ai"]):
            return BASE_ARTICULOS["inteligencia artificial"]
        elif any(palabra in tema_lower for palabra in ["machine learning", "ml", "aprendizaje autom√°tico"]):
            return BASE_ARTICULOS["machine learning"]
        elif any(palabra in tema_lower for palabra in ["educaci√≥n", "educativo", "estudiantes"]):
            return BASE_ARTICULOS["resiliencia"][:2]  # Art√≠culos de resiliencia educativa
        
        # Por defecto, devolver art√≠culos de resiliencia
        return BASE_ARTICULOS["resiliencia"][:2]
    
    def generar_preguntas(self, prompt):
        """Genera preguntas de investigaci√≥n con razonamiento"""
        tema = self.extraer_tema(prompt.lower())
        
        respuesta = f"**üìù He analizado tu inter√©s en '{tema}' y gener√© estas preguntas de investigaci√≥n:**\n\n"
        
        preguntas = [
            f"¬øCu√°les son los principales factores que influyen en {tema} seg√∫n la literatura reciente?",
            f"¬øC√≥mo ha evolucionado la investigaci√≥n sobre {tema} en la √∫ltima d√©cada?",
            f"¬øQu√© metodolog√≠as son m√°s efectivas para estudiar {tema}?",
            f"¬øExisten diferencias significativas en {tema} entre distintos contextos?",
            f"¬øQu√© brechas de conocimiento existen actualmente en {tema}?"
        ]
        
        for i, pregunta in enumerate(preguntas, 1):
            respuesta += f"{i}. {pregunta}\n\n"
        
        respuesta += "**üí≠ Mi razonamiento:** Bas√© estas preguntas en marcos te√≥ricos establecidos y brechas comunes de investigaci√≥n."
        
        return respuesta, []
    
    def sugerir_metodologia(self, prompt):
        """Sugiere metodolog√≠a con razonamiento"""
        tema = self.extraer_tema(prompt.lower())
        
        respuesta = f"**üìä Para investigar '{tema}', te sugiero esta metodolog√≠a:**\n\n"
        
        metodologia = [
            "**Dise√±o:** Estudio mixto de tipo explicativo secuencial",
            "**Muestra:** Muestreo estratificado (n ‚âà 200-300 participantes)",
            "**Instrumentos:** Combinaci√≥n de escalas validadas y entrevistas semiestructuradas",
            "**An√°lisis:** Estad√≠stica inferencial + an√°lisis tem√°tico cualitativo",
            "**Software:** R + NVivo para integraci√≥n de datos"
        ]
        
        for item in metodologia:
            respuesta += f"‚Ä¢ {item}\n"
        
        respuesta += "\n**üí≠ Mi razonamiento:** Esta aproximaci√≥n mixta permite comprender tanto los patrones cuantitativos como las experiencias cualitativas."
        
        return respuesta, []
    
    def crear_estructura(self, prompt):
        """Crea estructura con razonamiento"""
        respuesta = "**üìã Estructura recomendada para trabajo acad√©mico:**\n\n"
        
        estructura = [
            "**INTRODUCCI√ìN** (Planteamiento del problema y justificaci√≥n)",
            "**MARCO TE√ìRICO** (Fundamentos te√≥ricos y estado del arte)",
            "**METODOLOG√çA** (Dise√±o, participantes, instrumentos y procedimientos)",
            "**RESULTADOS** (Presentaci√≥n sistem√°tica de hallazgos)",
            "**DISCUSI√ìN** (Interpretaci√≥n y relaci√≥n con literatura)",
            "**CONCLUSIONES** (Principales aportes y limitaciones)"
        ]
        
        for i, item in enumerate(estructura, 1):
            respuesta += f"{i}. {item}\n"
        
        respuesta += "\n**üí≠ Mi razonamiento:** Esta estructura sigue los est√°ndares acad√©micos y facilita la comunicaci√≥n de la investigaci√≥n."
        
        return respuesta, []
    
    def respuesta_general(self, prompt):
        """Respuesta general con razonamiento"""
        respuesta = """
        **ü§ñ ¬°Hola! Soy tu asistente de investigaci√≥n inteligente.**

        **üí≠ He analizado tu mensaje y puedo ayudarte con:**

        üîç **B√∫squeda de art√≠culos** - Encuentro papers acad√©micos con razonamiento contextual
        üìù **Preguntas de investigaci√≥n** - Genero preguntas basadas en marcos te√≥ricos  
        üìä **Metodolog√≠a** - Sugiero dise√±os apropiados con justificaci√≥n
        üìã **Estructura** - Creo esquemas siguiendo est√°ndares acad√©micos

        **üí¨ Ejemplos que comprendo:**
        - "Busca art√≠culos sobre resiliencia en educaci√≥n"
        - "Genera preguntas de investigaci√≥n sobre inteligencia artificial"
        - "Sugiere metodolog√≠a para un estudio sobre machine learning"
        - "Ay√∫dame con la estructura de una tesis"

        **¬°Cu√©ntame qu√© necesitas investigar!**
        """
        return respuesta, []

# Instanciar chatbot
chatbot = ChatbotInvestigacion()

# HERRAMIENTA 1: Buscador de Fuentes Acad√©micas
def herramienta_fuentes():
    st.header("üîç Buscador de Fuentes Acad√©micas")
    
    with st.form("form_fuentes"):
        col1, col2 = st.columns(2)
        
        with col1:
            tema_especifico = st.text_input("Tema espec√≠fico de investigaci√≥n:")
            area_estudio = st.selectbox(
                "√Årea de estudio:",
                ["Ciencias de la Salud", "Ingenier√≠a y Tecnolog√≠a", "Ciencias Sociales", 
                 "Humanidades", "Ciencias Naturales", "Educaci√≥n", "Negocios"]
            )
            
        with col2:
            palabras_clave = st.text_input("Palabras clave principales (separadas por coma):")
            tipo_fuente = st.multiselect(
                "Tipos de fuentes preferidas:",
                ["Art√≠culos cient√≠ficos", "Libros acad√©micos", "Tesis doctorales", 
                 "Conferencias", "Reportes t√©cnicos", "Revistas indexadas"]
            )
        
        if st.form_submit_button("üöÄ Buscar Fuentes Recomendadas", type="primary"):
            if tema_especifico:
                with st.spinner("Buscando en bases de datos especializadas..."):
                    time.sleep(2)
                    
                    # Usar el chatbot para buscar
                    respuesta, articulos = chatbot.procesar_busqueda(tema_especifico)
                    
                    st.success("‚úÖ **FUENTES ENCONTRADAS PARA TU TEMA**")
                    st.markdown(respuesta)
                    
                    if articulos:
                        for i, articulo in enumerate(articulos, 1):
                            with st.expander(f"üìÑ {i}. {articulo['titulo']}"):
                                st.markdown(f"""
                                **Autores:** {articulo['autores']}  
                                **A√±o:** {articulo['a√±o']} | **Revista:** {articulo['revista']}  
                                **Fuente:** {articulo['fuente']}  
                                **Enlace:** [Acceder al art√≠culo]({articulo['enlace']})  
                                **Resumen:** {articulo['resumen']}
                                """)

# HERRAMIENTA 6: Chatbot de Investigaci√≥n (PRINCIPAL)
def herramienta_chatbot():
    st.header("ü§ñ Chatbot de Investigaci√≥n Inteligente")
    
    st.markdown("""
    **üí¨ Interact√∫a naturalmente conmigo. Puedo:**
    - üîç **Buscar art√≠culos** con razonamiento contextual
    - üìù **Generar preguntas** de investigaci√≥n  
    - üìä **Sugerir metodolog√≠as** apropiadas
    - üìã **Crear estructuras** de trabajos
    """)
    
    # Historial de chat
    for message in st.session_state.chat_history:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            
            # Mostrar art√≠culos si existen
            if "articulos" in message and message["articulos"]:
                st.markdown("---")
                for i, articulo in enumerate(message["articulos"], 1):
                    with st.expander(f"üìÑ {i}. {articulo['titulo']}", expanded=False):
                        st.markdown(f"""
                        **Autores:** {articulo['autores']}  
                        **A√±o:** {articulo['a√±o']} | **Revista:** {articulo['revista']}  
                        **Fuente:** {articulo['fuente']}  
                        **Metodolog√≠a:** {articulo['metodologia']}  
                        **Enlace:** [Acceder al art√≠culo]({articulo['enlace']})  
                        **Resumen:** {articulo['resumen']}
                        """)

    # Input del usuario
    if prompt := st.chat_input("Escribe tu consulta de investigaci√≥n..."):
        # Agregar mensaje del usuario
        st.session_state.chat_history.append({"role": "user", "content": prompt})
        
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Procesar con el chatbot inteligente
        with st.chat_message("assistant"):
            with st.spinner("ü§î Analizando tu consulta..."):
                time.sleep(1)
                
                # El chatbot RAZONA y decide qu√© hacer
                respuesta, articulos = chatbot.razonar_consulta(prompt)
                
                st.markdown(respuesta)
                
                # Guardar en historial
                st.session_state.chat_history.append({
                    "role": "assistant", 
                    "content": respuesta,
                    "articulos": articulos
                })

# Las otras herramientas se mantienen igual...
def herramienta_preguntas():
    st.header("üìù Generador de Preguntas de Investigaci√≥n")
    # ... (c√≥digo original)

def herramienta_metodologia():
    st.header("üìä Planificador de Metodolog√≠a")
    # ... (c√≥digo original)

def herramienta_estructura():
    st.header("üìã Estructurador de Trabajos Acad√©micos")
    # ... (c√≥digo original)

def herramienta_cronograma():
    st.header("‚è±Ô∏è Cronograma de Investigaci√≥n")
    # ... (c√≥digo original)

# Mostrar herramienta activa
if st.session_state.herramienta_activa == "üîç Buscador de Fuentes Acad√©micas":
    herramienta_fuentes()
elif st.session_state.herramienta_activa == "üìù Generador de Preguntas de Investigaci√≥n":
    herramienta_preguntas()
elif st.session_state.herramienta_activa == "üìä Planificador de Metodolog√≠a":
    herramienta_metodologia()
elif st.session_state.herramienta_activa == "üìã Estructurador de Trabajos":
    herramienta_estructura()
elif st.session_state.herramienta_activa == "‚è±Ô∏è Cronograma de Investigaci√≥n":
    herramienta_cronograma()
elif st.session_state.herramienta_activa == "ü§ñ Chatbot de Investigaci√≥n":
    herramienta_chatbot()
else:
    st.info("üëà **Selecciona una herramienta en el men√∫ lateral para comenzar**")

# Bot√≥n para limpiar chat solo en el chatbot
if st.session_state.herramienta_activa == "ü§ñ Chatbot de Investigaci√≥n":
    if st.button("üßπ Limpiar Conversaci√≥n"):
        st.session_state.chat_history = []
        st.rerun()

# Pie de p√°gina
st.markdown("---")
st.caption("üîç Kit de Herramientas de Investigaci√≥n v2.0 | Chatbot inteligente | Enlaces verificados")
