import streamlit as st
import time
import pandas as pd
import requests
import json

st.set_page_config(
    page_title="Kit de Herramientas de Investigaci√≥n", 
    page_icon="üîç",
    layout="wide"
)

st.title("üîç Kit de Herramientas de Investigaci√≥n + Chatbot Acad√©mico")
st.markdown("---")

# Inicializar estado
if "herramienta_activa" not in st.session_state:
    st.session_state.herramienta_activa = None
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Sidebar - Selecci√≥n de herramienta
with st.sidebar:
    st.header("üõ†Ô∏è HERRAMIENTAS DISPONIBLES")
    
    herramienta = st.radio(
        "Selecciona una herramienta:",
        [
            "üîç Buscador de Fuentes Acad√©micas",
            "ü§ñ Chatbot Buscador de Art√≠culos", 
            "üìù Generador de Preguntas de Investigaci√≥n",
            "üìä Planificador de Metodolog√≠a",
            "üìã Estructurador de Trabajos",
            "‚è±Ô∏è Cronograma de Investigaci√≥n"
        ]
    )
    
    st.session_state.herramienta_activa = herramienta
    
    st.markdown("---")
    st.info("üí° **Instrucciones:** Selecciona una herramienta y completa el formulario")

# Funci√≥n para buscar art√≠culos en APIs acad√©micas
def buscar_articulos_academicos(tema, max_resultados=5):
    """
    Simula b√∫squeda en bases de datos acad√©micas
    En una implementaci√≥n real, conectar√≠as con APIs como:
    - Google Scholar API
    - CrossRef API
    - arXiv API
    - PubMed API
    """
    
    # Simulaci√≥n de b√∫squeda en diferentes bases de datos
    resultados = {
        "Google Scholar": [
            f"Art√≠culo sobre '{tema}' - Revista Internacional 2024",
            f"Estudio emp√≠rico: {tema} en contexto latinoamericano",
            f"Revisi√≥n sistem√°tica sobre {tema} - 2023",
            f"Tesis doctoral: An√°lisis de {tema}",
            f"Conferencia internacional sobre {tema}"
        ],
        "PubMed": [
            f"Clinical trial: {tema} outcomes",
            f"Meta-analysis: {tema} effectiveness",
            f"Systematic review: {tema} treatments",
            f"Case study: {tema} application"
        ],
        "IEEE Xplore": [
            f"Technical paper: {tema} implementation",
            f"Conference proceeding: {tema} innovations",
            f"Journal article: {tema} algorithms"
        ]
    }
    
    return resultados

# HERRAMIENTA 1: Buscador de Fuentes Acad√©micas
def herramienta_fuentes():
    st.header("üîç Buscador de Fuentes Acad√©micas")
    
    with st.form("form_fuentes"):
        col1, col2 = st.columns(2)
        
        with col1:
            tema_especifico = st.text_input("Tema espec√≠fico de investigaci√≥n:")
            area_estudio = st.selectbox(
                "√Årea de estudio:",
                ["Ciencias de la Salud", "Ingenier√≠a y Tecnolog√≠a", "Ciencias Sociales", 
                 "Humanidades", "Ciencias Naturales", "Educaci√≥n", "Negocios"]
            )
            
        with col2:
            palabras_clave = st.text_input("Palabras clave principales (separadas por coma):")
            tipo_fuente = st.multiselect(
                "Tipos de fuentes preferidas:",
                ["Art√≠culos cient√≠ficos", "Libros acad√©micos", "Tesis doctorales", 
                 "Conferencias", "Reportes t√©cnicos", "Revistas indexadas"]
            )
        
        if st.form_submit_button("üöÄ Buscar Fuentes Recomendadas", type="primary"):
            if tema_especifico:
                with st.spinner("Buscando en bases de datos especializadas..."):
                    time.sleep(2)
                    
                    # Resultados espec√≠ficos por √°rea
                    fuentes_especificas = {
                        "Ciencias de la Salud": [
                            "**PubMed** (pubmed.ncbi.nlm.nih.gov) - 15 art√≠culos recientes encontrados",
                            "**SciELO** (scielo.org) - 8 art√≠culos en acceso abierto", 
                            "**ScienceDirect** - 12 estudios relacionados",
                            "**MEDLINE** - 10 investigaciones cl√≠nicas",
                            "**Revistas:** The Lancet, JAMA, New England Journal of Medicine"
                        ],
                        "Ingenier√≠a y Tecnolog√≠a": [
                            "**IEEE Xplore** (ieeexplore.ieee.org) - 20 papers t√©cnicos",
                            "**ACM Digital Library** - 15 art√≠culos de computaci√≥n",
                            "**SpringerLink** - 18 publicaciones en ingenier√≠a",
                            "**Google Scholar** - 25+ referencias relevantes",
                            "**Revistas:** IEEE Transactions, Nature Engineering"
                        ],
                        "Ciencias Sociales": [
                            "**JSTOR** (jstor.org) - 22 art√≠culos acad√©micos",
                            "**PsycINFO** - 15 estudios en psicolog√≠a",
                            "**Scopus** - 18 investigaciones sociales",
                            "**Redalyc** - 12 art√≠culos en espa√±ol",
                            "**Revistas:** American Sociological Review, Social Forces"
                        ]
                    }
                    
                    st.success("‚úÖ **FUENTES ENCONTRADAS PARA TU TEMA**")
                    
                    # Mostrar fuentes espec√≠ficas
                    area_key = area_estudio if area_estudio in fuentes_especificas else "Ciencias Sociales"
                    fuentes = fuentes_especificas.get(area_key, fuentes_especificas["Ciencias Sociales"])
                    
                    for i, fuente in enumerate(fuentes, 1):
                        st.write(f"{i}. {fuente}")
                    
                    # Estrategias de b√∫squeda
                    st.info("""
                    **üîç ESTRATEGIAS DE B√öSQUEDA AVANZADA:**
                    - Usa operadores booleanos: `"{}" AND {}`
                    - Filtra por fecha: √∫ltimos 5 a√±os
                    - Revisa las referencias de art√≠culos clave
                    - Consulta autores especializados en el √°rea
                    """.format(tema_especifico, palabras_clave))
            else:
                st.warning("‚ö†Ô∏è Por favor ingresa un tema espec√≠fico de investigaci√≥n")

# HERRAMIENTA 2: CHATBOT BUSCADOR DE ART√çCULOS
def herramienta_chatbot():
    st.header("ü§ñ Chatbot Buscador de Art√≠culos en Tiempo Real")
    
    st.markdown("""
    **üí¨ Puedes pedirme que busque art√≠culos sobre cualquier tema de investigaci√≥n**
    - Ejemplo: "Busca art√≠culos sobre machine learning en medicina"
    - "Encuentra estudios recientes sobre cambio clim√°tico"
    - "Art√≠culos sobre inteligencia artificial en educaci√≥n"
    """)
    
    # Historial de chat
    for message in st.session_state.chat_history:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Input del usuario
    if prompt := st.chat_input("Escribe tu solicitud de b√∫squeda..."):
        # Agregar mensaje del usuario al historial
        st.session_state.chat_history.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Procesar la solicitud y buscar art√≠culos
        with st.chat_message("assistant"):
            with st.spinner("Buscando art√≠culos en bases de datos acad√©micas..."):
                time.sleep(2)
                
                # Extraer t√©rminos de b√∫squeda del prompt
                terminos_busqueda = prompt.lower()
                if "busca" in terminos_busqueda or "encuentra" in terminos_busqueda or "art√≠culos" in terminos_busqueda:
                    # Simular b√∫squeda de art√≠culos
                    resultados = buscar_articulos_academicos(prompt)
                    
                    respuesta = f"**üîç Resultados de b√∫squeda para: '{prompt}'**\n\n"
                    
                    for base_datos, articulos in resultados.items():
                        respuesta += f"**üìö {base_datos}:**\n"
                        for i, articulo in enumerate(articulos[:3], 1):
                            respuesta += f"{i}. {articulo}\n"
                        respuesta += "\n"
                    
                    respuesta += """
                    **üí° Sugerencias para refinar tu b√∫squeda:**
                    - Especifica el a√±o de publicaci√≥n
                    - Agrega el nombre de autores relevantes
                    - Indica el tipo de estudio que buscas
                    - Especifica el √°mbito geogr√°fico
                    """
                else:
                    respuesta = """
                    **ü§ñ Asistente de Investigaci√≥n Acad√©mica**
                    
                    Puedo ayudarte a buscar art√≠culos cient√≠ficos. Por ejemplo, puedes pedirme:
                    - "Busca art√≠culos sobre machine learning en medicina"
                    - "Encuentra estudios recientes sobre cambio clim√°tico"
                    - "Art√≠culos sobre inteligencia artificial en educaci√≥n 2023"
                    - "Investiga sobre energ√≠as renovables en Am√©rica Latina"
                    """
                
                st.markdown(respuesta)
                st.session_state.chat_history.append({"role": "assistant", "content": respuesta})
        
        # Bot√≥n para limpiar historial
        if st.button("üßπ Limpiar Conversaci√≥n"):
            st.session_state.chat_history = []
            st.rerun()

# HERRAMIENTA 3: Generador de Preguntas de Investigaci√≥n
def herramienta_preguntas():
    st.header("üìù Generador de Preguntas de Investigaci√≥n")
    
    with st.form("form_preguntas"):
        problema = st.text_area("Describe el problema o fen√≥meno que quieres investigar:", height=100)
        contexto = st.text_input("Contexto espec√≠fico (ej: educaci√≥n superior, salud p√∫blica, etc.):")
        enfoque = st.selectbox("Enfoque preferido:", ["Cualitativo", "Cuantitativo", "Mixto"])
        
        if st.form_submit_button("üéØ Generar Preguntas de Investigaci√≥n", type="primary"):
            if problema:
                with st.spinner("Generando preguntas de investigaci√≥n..."):
                    time.sleep(2)
                    
                    st.success("**üìã PREGUNTAS DE INVESTIGACI√ìN GENERADAS:**")
                    
                    preguntas = [
                        f"¬øCu√°l es la relaci√≥n entre {problema.split()[0]} y [variable clave] en el contexto de {contexto}?",
                        f"¬øC√≥mo influye {problema.split()[0]} en los resultados de {contexto} seg√∫n la perspectiva {enfoque.lower()}?",
                        f"¬øQu√© factores determinan el impacto de {problema.split()[0]} en {contexto}?",
                        f"¬øEn qu√© medida var√≠a {problema.split()[0]} seg√∫n diferentes condiciones en {contexto}?",
                        f"¬øCu√°les son las principales barreras y facilitadores de {problema.split()[0]} en {contexto}?"
                    ]
                    
                    for i, pregunta in enumerate(preguntas, 1):
                        st.write(f"{i}. {pregunta}")
                    
                    st.info("""
                    **üí° CRITERIOS DE BUENAS PREGUNTAS:**
                    ‚Ä¢ **Claras y espec√≠ficas**
                    ‚Ä¢ **Medibles** con metodolog√≠a apropiada  
                    ‚Ä¢ **Relevantes** para el campo de estudio
                    ‚Ä¢ **Factibles** de investigar
                    ‚Ä¢ **Originales** o con nuevo enfoque
                    """)

# HERRAMIENTA 4: Planificador de Metodolog√≠a
def herramienta_metodologia():
    st.header("üìä Planificador de Metodolog√≠a")
    
    with st.form("form_metodologia"):
        col1, col2 = st.columns(2)
        
        with col1:
            tipo_estudio = st.selectbox(
                "Tipo de estudio:",
                ["Descriptivo", "Exploratorio", "Explicativo", "Experimental", "Caso de estudio"]
            )
            poblacion = st.text_input("Poblaci√≥n o muestra de estudio:")
            
        with col2:
            t√©cnicas = st.multiselect(
                "T√©cnicas de recolecci√≥n de datos:",
                ["Encuestas", "Entrevistas", "Observaci√≥n", "An√°lisis documental", "Experimentaci√≥n", "Focus Groups"]
            )
            analisis = st.selectbox(
                "An√°lisis de datos:",
                ["Estad√≠stico", "Qualitative Content Analysis", "An√°lisis tem√°tico", "An√°lisis comparativo", "Mixto"]
            )
        
        if st.form_submit_button("üìã Generar Plan Metodol√≥gico", type="primary"):
            with st.spinner("Dise√±ando metodolog√≠a..."):
                time.sleep(2)
                
                st.success("**üìä PLAN METODOL√ìGICO RECOMENDADO:**")
                
                st.write(f"""
                **DISE√ëO DE INVESTIGACI√ìN:**
                ‚Ä¢ **Tipo:** Estudio {tipo_estudio.lower()}
                ‚Ä¢ **Enfoque:** {'Cuantitativo' if t√©cnicas and 'Encuestas' in t√©cnicas else 'Cualitativo o Mixto'}
                ‚Ä¢ **Poblaci√≥n:** {poblacion if poblacion else "Por definir"}
                
                **T√âCNICAS DE RECOLECCI√ìN:**
                {chr(10).join(f'‚Ä¢ {tec}' for tec in t√©cnicas)}
                
                **AN√ÅLISIS DE DATOS:**
                ‚Ä¢ **M√©todo:** {analisis}
                ‚Ä¢ **Herramientas:** {'SPSS, Excel' if analisis == 'Estad√≠stico' else 'NVivo, Atlas.ti' if analisis == 'Qualitative Content Analysis' else 'Espec√≠ficas seg√∫n datos'}
                
                **CONSIDERACIONES √âTICAS:**
                ‚Ä¢ Consentimiento informado
                ‚Ä¢ Confidencialidad de datos
                ‚Ä¢ Aprobaci√≥n comit√© de √©tica si aplica
                """)

# HERRAMIENTA 5: Estructurador de Trabajos
def herramienta_estructura():
    st.header("üìã Estructurador de Trabajos Acad√©micos")
    
    tipo_trabajo = st.selectbox(
        "Selecciona el tipo de trabajo acad√©mico:",
        ["Tesina", "Tesis", "Art√≠culo cient√≠fico", "Ensayo", "Reporte"],
        key="tipo_trabajo"
    )
    
    with st.form("form_estructura"):
        tema = st.text_input("Tema principal del trabajo:")
        objetivos = st.text_area("Objetivos principales (uno por l√≠nea):")
        
        if st.form_submit_button("üèóÔ∏è Generar Estructura", type="primary"):
            if tema:
                with st.spinner("Creando estructura..."):
                    time.sleep(2)
                    
                    estructuras = {
                        "Tesis": [
                            "**CAP√çTULO I: INTRODUCCI√ìN**",
                            "1.1 Planteamiento del Problema",
                            "1.2 Preguntas de Investigaci√≥n", 
                            "1.3 Objetivos (General y Espec√≠ficos)",
                            "1.4 Justificaci√≥n",
                            "**CAP√çTULO II: MARCO TE√ìRICO**",
                            "2.1 Antecedentes de la Investigaci√≥n",
                            "2.2 Bases Te√≥ricas",
                            "2.3 Definici√≥n de T√©rminos",
                            "**CAP√çTULO III: METODOLOG√çA**",
                            "3.1 Dise√±o de Investigaci√≥n",
                            "3.2 Poblaci√≥n y Muestra",
                            "3.3 T√©cnicas e Instrumentos",
                            "**CAP√çTULO IV: RESULTADOS**",
                            "4.1 An√°lisis de Datos",
                            "4.2 Presentaci√≥n de Resultados",
                            "**CAP√çTULO V: DISCUSI√ìN Y CONCLUSIONES**",
                            "5.1 Discusi√≥n de Resultados",
                            "5.2 Conclusiones",
                            "5.3 Recomendaciones"
                        ],
                        "Art√≠culo cient√≠fico": [
                            "**T√çTULO** (claro y descriptivo)",
                            "**RESUMEN** (250-300 palabras)",
                            "**INTRODUCCI√ìN** (problema, relevancia, objetivos)",
                            "**REVISI√ìN DE LITERATURA** (breve y focalizada)", 
                            "**METODOLOG√çA** (suficiente para replicaci√≥n)",
                            "**RESULTADOS** (presentaci√≥n clara de hallazgos)",
                            "**DISCUSI√ìN** (interpretaci√≥n y relaci√≥n con literatura)",
                            "**CONCLUSIONES** (principales aportes)",
                            "**REFERENCIAS** (formato espec√≠fico de revista)"
                        ],
                        "Tesina": [
                            "**INTRODUCCI√ìN**",
                            "**MARCO TE√ìRICO**",
                            "**METODOLOG√çA**",
                            "**AN√ÅLISIS Y RESULTADOS**",
                            "**CONCLUSIONES**",
                            "**BIBLIOGRAF√çA**"
                        ]
                    }
                    
                    st.success(f"**üìñ ESTRUCTURA PARA {tipo_trabajo.upper()}:**")
                    
                    estructura = estructuras.get(tipo_trabajo, estructuras["Tesis"])
                    for item in estructura:
                        st.write(f"‚Ä¢ {item}")

# HERRAMIENTA 6: Cronograma de Investigaci√≥n
def herramienta_cronograma():
    st.header("‚è±Ô∏è Cronograma de Investigaci√≥n")
    
    with st.form("form_cronograma"):
        duracion_meses = st.slider("Duraci√≥n total del proyecto (meses):", 3, 24, 6)
        fecha_inicio = st.date_input("Fecha de inicio estimada:")
        
        if st.form_submit_button("üìÖ Generar Cronograma", type="primary"):
            with st.spinner("Planificando cronograma..."):
                time.sleep(2)
                
                # Generar cronograma autom√°tico
                fases = [
                    {"fase": "Revisi√≥n Literaria y Marco Te√≥rico", "duracion": max(1, duracion_meses // 4)},
                    {"fase": "Dise√±o Metodol√≥gico", "duracion": max(1, duracion_meses // 6)},
                    {"fase": "Recolecci√≥n de Datos", "duracion": max(2, duracion_meses // 3)},
                    {"fase": "An√°lisis de Resultados", "duracion": max(1, duracion_meses // 4)},
                    {"fase": "Redacci√≥n y Revisi√≥n", "duracion": max(1, duracion_meses // 3)}
                ]
                
                st.success("**üìä CRONOGRAMA DE INVESTIGACI√ìN:**")
                
                df = pd.DataFrame(fases)
                st.dataframe(df, use_container_width=True)
                
                st.info(f"""
                **üìã DISTRIBUCI√ìN DE TIEMPO ({duracion_meses} meses total):**
                
                ‚Ä¢ **Preparaci√≥n:** {fases[0]['duracion'] + fases[1]['duracion']} meses
                ‚Ä¢ **Ejecuci√≥n:** {fases[2]['duracion']} meses  
                ‚Ä¢ **An√°lisis y escritura:** {fases[3]['duracion'] + fases[4]['duracion']} meses
                
                **üí° CONSEJOS:**
                - Incluye tiempo extra para imprevistos
                - Establece hitos espec√≠ficos por fase
                - Programa revisiones peri√≥dicas
                """)

# Mostrar herramienta activa
if st.session_state.herramienta_activa == "üîç Buscador de Fuentes Acad√©micas":
    herramienta_fuentes()
elif st.session_state.herramienta_activa == "ü§ñ Chatbot Buscador de Art√≠culos":
    herramienta_chatbot()
elif st.session_state.herramienta_activa == "üìù Generador de Preguntas de Investigaci√≥n":
    herramienta_preguntas()
elif st.session_state.herramienta_activa == "üìä Planificador de Metodolog√≠a":
    herramienta_metodologia()
elif st.session_state.herramienta_activa == "üìã Estructurador de Trabajos":
    herramienta_estructura()
elif st.session_state.herramienta_activa == "‚è±Ô∏è Cronograma de Investigaci√≥n":
    herramienta_cronograma()
else:
    st.info("üëà **Selecciona una herramienta en el men√∫ lateral para comenzar**")

# Pie de p√°gina
st.markdown("---")
st.caption("üîç Kit de Herramientas de Investigaci√≥n v4.0 | Chatbot integrado + B√∫squeda en tiempo real | ¬© 2024")
